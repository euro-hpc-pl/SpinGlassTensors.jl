        - export
        -     rq_fact,
        -     qr_fact
        - 
        - function qr_fact(M::AbstractMatrix, Dcut::Int=typemax(Int), tol::Float64=1E-15, args...)
        0     q, r = _qr_fix(qr(M, args...))
        0     if Dcut > size(q, 2) return q, r end
        0     U, Σ, V = svd(r, Dcut, tol)
  6818624     q * U, Σ .* V'
        - end
        - 
        - function rq_fact(M::AbstractMatrix, Dcut::Int=typemax(Int), tol::Float64=1E-15, args...)
        0     q, r = qr_fact(M', Dcut, tol, args...)
        -     r', q'
        - end
        - 
        - function _qr_fix(QR_fact::T) where T <: LinearAlgebra.QRCompactWY
        0     d = diag(QR_fact.R)
        0     L = length(d)
 90309728     ph = zeros(L, L)
        0     for i ∈ 1:L
        0         @inbounds ph[i, i] = ifelse(
        -             isapprox(d[i], 0, atol=1e-14), 1, d[i] / abs(d[i])
        -         )
        -     end
 95920288     QR_fact.Q * ph, diag(ph) .* QR_fact.R
        - end
        - 
        - function LinearAlgebra.svd(
        -     A::AbstractMatrix, Dcut::Int=typemax(Int), tol::Float64=1E-15, args...
        - )
 41944480     U, Σ, V = svd(A, args...)
        - 
        0     tol = Σ[begin] * max(eps(), tol)
   132960     δ = min(Dcut, sum(Σ .> tol))
        - 
        0     U = U[:, begin:δ]
    10080     Σ = Σ[begin:δ]
    20160     Σ ./ sum(Σ .^ 2)
        0     V = V[:, begin:δ]
        - 
        0     d = diag(U)
        0     for i ∈ eachindex(d) @inbounds d[i] = ifelse(isapprox(d[i], 0, atol=1e-14), 1, d[i]) end
    10080     ph = d ./ abs.(d)
        0     U * Diagonal(ph), Σ, V * Diagonal(ph)
        - end
